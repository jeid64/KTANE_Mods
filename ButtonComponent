#region " Imports "
using Assets.Scripts.Missions;
using Assets.Scripts.Records;
using Assets.Scripts.Rules;
using BombGame;
using System;
using System.Collections.Generic;
using UnityEngine;
using log4net;
#endregion 

#region " Referenced assemblies "
// - mscorlib v2.0.0.0
// - UnityEngine v0.0.0.0
// - UnityEngine.UI v1.0.0.0
// - System.Core v3.5.0.0
// - System v2.0.0.0
// - log4net v1.2.13.0
// - Assembly-CSharp-firstpass v0.0.0.0
// - System.Xml v2.0.0.0
// - Assembly-CSharp v0.0.0.0
// - Assembly-CSharp v0.0.0.0
#endregion 

class ButtonComponent
{
	// Limited support!
	// You can only reference methods or fields defined in the class (not in ancestors classes)
	// Fields and methods stubs are needed for compilation purposes only.
	// Reflexil will automaticaly map current type, fields or methods to original references.
	void SetIndicatorColor(BombGame.BigButtonLEDColor color)
	{
	  //this.IndicatorColor = color;
    this.LED_Off.SetActive(false);
    this.LED_Red.SetActive(false);
    this.LED_Blue.SetActive(false);
    this.LED_Yellow.SetActive(false);
    this.LED_White.SetActive(false);
    LogManager.GetLogger("BUTTON").DebugFormat("SET COLOR {0}",color.ToString());
    switch (color)
    {
      case BigButtonLEDColor.Red:
        this.LED_Red.SetActive(true);
        break;
      case BigButtonLEDColor.Blue:
        this.LED_Blue.SetActive(true);
        break;
      case BigButtonLEDColor.Yellow:
        this.LED_Yellow.SetActive(true);
        break;
      case BigButtonLEDColor.White:
        this.LED_White.SetActive(true);
        break;
    }
	}
	
	  public enum OpenLidBehaviour
  {
    OnSelection,
    OnInteraction,
  }
	
	#region " Methods stubs "
	// Do not add or update any method. If compilation fails because of a method declaration, comment it
	ButtonComponent()
	{
	}
	
	BombGame.ButtonColor get_ButtonColor()
	{
		return default(BombGame.ButtonColor);
	}
	
	void set_ButtonColor(BombGame.ButtonColor @value)
	{
	}
	
	BombGame.ButtonInstruction get_ButtonInstruction()
	{
		return default(BombGame.ButtonInstruction);
	}
	
	void set_ButtonInstruction(BombGame.ButtonInstruction @value)
	{
	}
	
	BombGame.BigButtonLEDColor get_IndicatorColor()
	{
		return default(BombGame.BigButtonLEDColor);
	}
	
	void set_IndicatorColor(BombGame.BigButtonLEDColor @value)
	{
	}
	
	bool get_IsHolding()
	{
		return default(bool);
	}
	
	void set_IsHolding(bool @value)
	{
	}
	
	void Awake()
	{
	}
	
	void Start()
	{
	}
	
	void Update()
	{
	}
	
	bool OnModuleInteract()
	{
		return default(bool);
	}
	
	void OnModuleSelect()
	{
	}
	
	void OnModuleDeselect(Selectable newSelectable)
	{
	}
	
	void OnButtonDeselect(Selectable newSelectable)
	{
	}
	
	void OnButtonCancel()
	{
	}
	
	void OpenLid()
	{
	}
	
	void CloseLid()
	{
	}
	
	void SetButtonInstruction(BombGame.ButtonInstruction val)
	{
	}
	
	void OnHold()
	{
	}
	
	void StartHolding()
	{
	}
	
	void OnRelease()
	{
	}
	
	void SetIndicatorOff()
	{
	}
	
	void HandleRelease(float duration)
	{
	}
	
	#endregion 
	
	#region " Fields stubs "
	// Do not add or update any field. If compilation fails because of a field declaration, comment it
	PressableButton button;
	UnityEngine.GameObject LED_Off;
	UnityEngine.GameObject LED_Red;
	UnityEngine.GameObject LED_White;
	UnityEngine.GameObject LED_Blue;
	UnityEngine.GameObject LED_Yellow;
	OpenLidBehaviour LidBehaviour;
	UnityEngine.Animator LidAnimator;
	float pressThreshold;
	float heldDuration;
	bool isLidOpen;
	Selectable moduleSelectable;
	Selectable buttonSelectable;
	System.Collections.Generic.List<BombGame.BigButtonLEDColor> ValidLightUpColors;
	#endregion 

}
