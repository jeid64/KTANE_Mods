#region " Imports "
using System;
using System.Collections.Generic;
using System.Text;
#endregion 

#region " Referenced assemblies "
// - mscorlib v2.0.0.0
// - UnityEngine v0.0.0.0
// - UnityEngine.UI v1.0.0.0
// - System.Core v3.5.0.0
// - System v2.0.0.0
// - log4net v1.2.13.0
// - Assembly-CSharp-firstpass v0.0.0.0
// - System.Xml v2.0.0.0
// - Assembly-CSharp v0.0.0.0
// - System.Core v4.0.0.0
// - Assembly-CSharp v0.0.0.0
#endregion 

class MorseCodeComponent
{
	// Limited support!
	// You can only reference methods or fields defined in the class (not in ancestors classes)
	// Fields and methods stubs are needed for compilation purposes only.
	// Reflexil will automaticaly map current type, fields or methods to original references.
	void SetLED(LEDStateEnum state)
	{
	    if (!this.UseCharacterSpaceMaterial && state == MorseCodeComponent.LEDStateEnum.CharSpace)
      state = MorseCodeComponent.LEDStateEnum.Off;
    switch (state)
    {
      case MorseCodeComponent.LEDStateEnum.On:
        this.LEDLit.SetActive(true);
        this.LEDUnlit.SetActive(false);
        if (writePipe)
        {
            MorsePipeOut.WriteLine("morseon");
        }
        break;
      case MorseCodeComponent.LEDStateEnum.Off:
        this.LEDLit.SetActive(false);
        this.LEDUnlit.SetActive(true);
        if (writePipe)
        {
            MorsePipeOut.WriteLine("morseoff");
        }
        break;
      case MorseCodeComponent.LEDStateEnum.CharSpace:
        this.LEDLit.SetActive(false);
        this.LEDUnlit.SetActive(true);
        if (writePipe)
        {
            MorsePipeOut.WriteLine("morseoff");
        }
        break;
    }
	}
	
	#region " Methods stubs "
	// Do not add or update any method. If compilation fails because of a method declaration, comment it
	MorseCodeComponent()
	{
	}
	
	static MorseCodeComponent()
	{
	}
	
	int get_CurrentFrequency()
	{
		return default(int);
	}
	
	void Awake()
	{
	}
	
	void Start()
	{
	}
	
	void Activate()
	{
	}
	
	void PickRandomWord()
	{
	}
	
	static void CreateSignalDictionary()
	{
	}
	
	static void AddCharacterSignal(char c, string code)
	{
	}
	
	void OnButtonUpPushed()
	{
	}
	
	void OnButtonDownPushed()
	{
	}
	
	void RefreshDisplay()
	{
	}
	
	System.Collections.IEnumerator LoopRoutine()
	{
		return default(System.Collections.IEnumerator);
	}
	
	System.Collections.IEnumerator PlayWord(string word)
	{
		return default(System.Collections.IEnumerator);
	}
	
	System.Collections.IEnumerator PlaySequence(System.Collections.Generic.List<SignalEnum> signals)
	{
		return default(System.Collections.IEnumerator);
	}
	
	void OnButtonTransmitPushed()
	{
	}
	
	bool ButtonDown(int index)
	{
		return default(bool);
	}
	
	bool ButtonUp(int index)
	{
		return default(bool);
	}
	
	bool IsLocked()
	{
		return default(bool);
	}
	
	#endregion 
	
	#region " Fields stubs "
	// Do not add or update any field. If compilation fails because of a field declaration, comment it
	static log4net.ILog Logger;
	static System.Collections.Generic.Dictionary<char, System.Collections.Generic.List<SignalEnum>> signalDict;
	float DotLength;
	int LetterSpaceDurationInUnits;
	int WordSpaceDurationInUnits;
	bool UseCharacterSpaceMaterial;
	UnityEngine.Color LEDColor;
	UnityEngine.GameObject LEDLit;
	UnityEngine.GameObject LEDUnlit;
	UnityEngine.Material LEDCharSpaceMat;
	TMPro.TextMeshPro DisplayText;
	KeypadButton TransmitButton;
	KeypadButton UpButton;
	KeypadButton DownButton;
	int chosenFrequency;
	string chosenWord;
	int currentFrequencyIndex;
	System.IO.StreamWriter MorsePipeOut;
	bool writePipe;
	#endregion 

  protected enum SignalEnum
  {
    Dot,
    Dash,
  }

  protected enum LEDStateEnum
  {
    On,
    Off,
    CharSpace,
  }
}
