#region " Imports "
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Pipes;
using System.Text;
using Assets.Scripts.Missions;
#endregion 

#region " Referenced assemblies "
// - mscorlib v2.0.0.0
// - UnityEngine v0.0.0.0
// - UnityEngine.UI v1.0.0.0
// - System.Core v3.5.0.0
// - System v2.0.0.0
// - log4net v1.2.13.0
// - Assembly-CSharp-firstpass v0.0.0.0
// - System.Xml v2.0.0.0
// - Assembly-CSharp v0.0.0.0
// - Assembly-CSharp v0.0.0.0
#endregion 

class BombGenerator
{
	// Limited support!
	// You can only reference methods or fields defined in the class (not in ancestors classes)
	// Fields and methods stubs are needed for compilation purposes only.
	// Reflexil will automaticaly map current type, fields or methods to original references.
	  void HelloInjection()
	  {
	      logger.Debug("INSIDE THREAD");
	      var client = new NamedPipeClientStream("KTANEpipe");
	      client.Connect();
	      //reading format [NUMBER][TYPE]
	      StreamReader reader = new StreamReader(client);
	      StreamWriter writer = new StreamWriter(client);
	      writer.AutoFlush=true;
	
	      while (true)
	      {
	          string input = reader.ReadLine();
	          logger.DebugFormat("READ IN {0}", input);
	          foreach (BombComponent component in this.bomb.BombComponents)
	          {
	              if ((component.ComponentType == ComponentTypeEnum.Maze) && (input.Contains("maze")))
	              {
	                  int direction = Int32.Parse(input.Substring(0, 1));
	                  logger.DebugFormat("MOVING UP to {0}", direction);
	
	                  ((InvisibleWallsComponent)component).ButtonDown(direction);
	
	                  int X = ((InvisibleWallsComponent)component).GetCurrentCell().X;
	                  int Y = ((InvisibleWallsComponent)component).GetCurrentCell().Y;
	                  logger.DebugFormat("NOW AT POSITION {0},{1}", X, Y);
	                  logger.DebugFormat("Hit WALL: {0}",
	                      ((InvisibleWallsComponent)component).WallExistsFromCurrentInDirection(direction));
	
	                  writer.Write(((InvisibleWallsComponent)component).WallExistsFromCurrentInDirection(direction));
	              }
	              else if ((component.ComponentType == ComponentTypeEnum.Wires) && (input.Contains("wire")))
	              {
	                  //logger.Debug("SNIPPING 0");
	                  //((WireSetComponent)component).WireSnipped(0);
	              }
	              else if ((component.ComponentType == ComponentTypeEnum.BigButton) && (input.Contains("button")))
	              {
	                  int option = Int32.Parse(input.Substring(0, 1));
	                  if (option >= 1)
	                  {
	                      logger.Debug("START HOLDING");
	
	                      ((ButtonComponent)component).UpdatePublic();
	                      logger.DebugFormat("Color is: {0}", ((ButtonComponent)component).ActiveColor);
	
	                      writer.WriteLine(((ButtonComponent)component).ActiveColor);
	                  }
	                  else
	                  {
	                      logger.Debug("STOP HOLDING");
	                      ((ButtonComponent)component).OnRelease();
	                  }
	              }
	              else if ((component.ComponentType == ComponentTypeEnum.Keypad) && input.Contains("keypad"))
	              {
	                  int key = Int32.Parse(input.Substring(0, 1));
	
	                  logger.DebugFormat("PRESS KEY {0}", key);
	                  ((KeypadComponent)component).ButtonDown(key);
	                  ((KeypadComponent)component).buttons[key].Interact();
	
	                  logger.DebugFormat("Button WORKED: {0}",
	                  ((KeypadComponent)component).buttons[key].IsStayingDown);
	
	                  writer.WriteLine(((KeypadComponent)component).buttons[key].IsStayingDown);
	              }
	              else if ((component.ComponentType == ComponentTypeEnum.Simon) && input.Contains("simon"))
	              {
	                  int simonkey = Int32.Parse(input.Substring(0, 1));
	                  logger.DebugFormat("PRESS SIMON {0}", simonkey);
	                  ((SimonComponent)component).ButtonDown(simonkey);
	                  ((SimonComponent)component).buttons[simonkey].Interact();
	
	                  //writer.WriteLine()
	              }
	          }
	          logger.Debug("THEAD ALIVE");
	          System.Threading.Thread.Sleep(1000);
	      }
	  }
	
	#region " Methods stubs "
	// Do not add or update any method. If compilation fails because of a method declaration, comment it
	BombGenerator()
	{
	}
	
	static BombGenerator()
	{
	}
	
	void Awake()
	{
	}
	
	Bomb CreateBomb(Assets.Scripts.Missions.GeneratorSetting settings, HoldableSpawnPoint spawn, int seed, bool includeWidgets)
	{
		return default(Bomb);
	}
	
	void InstantiateComponent(BombFace selectedFace, BombComponent bombComponentPrefab)
	{
	}
	
	Assets.Scripts.Missions.ComponentTypeEnum SelectWeightedRandomComponentType(System.Collections.Generic.List<Assets.Scripts.Missions.ComponentTypeEnum> componentTypes)
	{
		return default(Assets.Scripts.Missions.ComponentTypeEnum);
	}
	
	#endregion 
	
	#region " Fields stubs "
	// Do not add or update any field. If compilation fails because of a field declaration, comment it
	static log4net.ILog logger;
	float bombScale;
	UnityEngine.GameObject bombCasePrefab;
	TimerComponent timerComponentPrefab;
	BombComponent emptyComponentPrefab;
	System.Collections.Generic.List<BombComponent> componentPrefabs;
	System.Collections.Generic.Dictionary<Assets.Scripts.Missions.ComponentTypeEnum, BombComponent> componentPrefabDictionary;
	System.Collections.Generic.Dictionary<Assets.Scripts.Missions.ComponentTypeEnum, float> componentWeights;
	bool UseWeightedSelection;
	System.Random rand;
	System.Collections.Generic.List<BombFace> validBombFaces;
	Bomb bomb;
	#endregion 

}
